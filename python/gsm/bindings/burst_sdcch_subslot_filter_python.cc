/*
 * Copyright 2022 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(flow_control/burst_sdcch_subslot_filter.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(ad140ed91934174a641d0f116d59784d)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gsm/flow_control/burst_sdcch_subslot_filter.h>
// pydoc.h is automatically generated in the build directory
#include <burst_sdcch_subslot_filter_pydoc.h>

void bind_burst_sdcch_subslot_filter(py::module& m)
{

    using burst_sdcch_subslot_filter    = ::gr::gsm::burst_sdcch_subslot_filter;


    py::class_<burst_sdcch_subslot_filter, gr::block, gr::basic_block,
        std::shared_ptr<burst_sdcch_subslot_filter>>(m, "burst_sdcch_subslot_filter", D(burst_sdcch_subslot_filter))

        .def(py::init(&burst_sdcch_subslot_filter::make),
           py::arg("mode"),
           py::arg("subslot"),
           D(burst_sdcch_subslot_filter,make)
        )
        




        
        .def("get_ss",&burst_sdcch_subslot_filter::get_ss,       
            D(burst_sdcch_subslot_filter,get_ss)
        )


        
        .def("set_ss",&burst_sdcch_subslot_filter::set_ss,       
            py::arg("ss"),
            D(burst_sdcch_subslot_filter,set_ss)
        )


        
        .def("get_mode",&burst_sdcch_subslot_filter::get_mode,       
            D(burst_sdcch_subslot_filter,get_mode)
        )


        
        .def("set_mode",&burst_sdcch_subslot_filter::set_mode,       
            py::arg("mode"),
            D(burst_sdcch_subslot_filter,set_mode)
        )


        
        .def("get_policy",&burst_sdcch_subslot_filter::get_policy,       
            D(burst_sdcch_subslot_filter,get_policy)
        )


        
        .def("set_policy",&burst_sdcch_subslot_filter::set_policy,       
            py::arg("policy"),
            D(burst_sdcch_subslot_filter,set_policy)
        )

        ;

    py::enum_<::gr::gsm::subslot_filter_mode>(m,"subslot_filter_mode")
        .value("SS_FILTER_SDCCH8", ::gr::gsm::subslot_filter_mode::SS_FILTER_SDCCH8) // 0
        .value("SS_FILTER_SDCCH4", ::gr::gsm::subslot_filter_mode::SS_FILTER_SDCCH4) // 1
        .export_values()
    ;

    py::implicitly_convertible<int, ::gr::gsm::subslot_filter_mode>();



}








