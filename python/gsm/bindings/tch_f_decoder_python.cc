/*
 * Copyright 2022 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(decoding/tch_f_decoder.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(733ec8e67bddda94db77b6f1dd63342d)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gsm/decoding/tch_f_decoder.h>
// pydoc.h is automatically generated in the build directory
#include <tch_f_decoder_pydoc.h>

void bind_tch_f_decoder(py::module& m)
{

    using tch_f_decoder    = ::gr::gsm::tch_f_decoder;


    py::class_<tch_f_decoder, gr::block, gr::basic_block,
        std::shared_ptr<tch_f_decoder>>(m, "tch_f_decoder", D(tch_f_decoder))

        .def(py::init(&tch_f_decoder::make),
           py::arg("mode"),
           py::arg("boundary_check") = false,
           D(tch_f_decoder,make)
        )
        



        ;

    py::enum_<::gr::gsm::tch_mode>(m,"tch_mode")
        .value("TCH_AFS12_2", ::gr::gsm::tch_mode::TCH_AFS12_2) // 0
        .value("TCH_AFS10_2", ::gr::gsm::tch_mode::TCH_AFS10_2) // 1
        .value("TCH_AFS7_95", ::gr::gsm::tch_mode::TCH_AFS7_95) // 2
        .value("TCH_AFS7_4", ::gr::gsm::tch_mode::TCH_AFS7_4) // 3
        .value("TCH_AFS6_7", ::gr::gsm::tch_mode::TCH_AFS6_7) // 4
        .value("TCH_AFS5_9", ::gr::gsm::tch_mode::TCH_AFS5_9) // 5
        .value("TCH_AFS5_15", ::gr::gsm::tch_mode::TCH_AFS5_15) // 6
        .value("TCH_AFS4_75", ::gr::gsm::tch_mode::TCH_AFS4_75) // 7
        .value("TCH_FS", ::gr::gsm::tch_mode::TCH_FS) // 8
        .value("TCH_EFR", ::gr::gsm::tch_mode::TCH_EFR) // 9
        .value("TCH_HS", ::gr::gsm::tch_mode::TCH_HS) // 10
        .export_values()
    ;

    py::implicitly_convertible<int, ::gr::gsm::tch_mode>();



}








